When would you want to use a remote repository rather than keeping all your work
local?
  When using more than one computer to work on a project, or when
  colaberating with someone else on a project, it would be useful
  to have work stored in a remote repository.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	If many people were working on the same project them they might want
	to choose a logical point at which to have the remote repository and 
	any changes made there to be included. Manually choosing where and when
	to sync would enable this level of control and avoid conflicts.
	
Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
  Forks: Used when cloning a repository on GitHub
  Clones: Used to make a copy of a repository, either locally or from github.
  Branches: Used to create different versions of a repository.
  
What is the benefit of having a copy of the last known state of the remote
stored locally?
  With a copy of the last known state of the remote stored locally I could
  work on the code offline whilst still keeping a history of where the
  online code was when I began, so making it possible to resolve any merge conflicts.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?
  Collaborating without using git or github would require someone to be the 
  holder of the master version. Changes would be submitted to them with a 
  description. They would have to review them, merge them and send out an
  updated version of the master files to all collaboraters.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
  When you are working at the same time as someone else on something then
  it would be a good idea to make a separte branch and make changes there,
  then when it's ready to be merged with the master branch, make a pull request
  to merge my adapted branch into to master branch. If there is a conflict then I
  could pull the master branch, merge locally into the adapted branch, resolve 
  any conflict, and make a further pull request to merge my adapted branch with
  the remote master.  
  "You just saw that the workflow when making changes in a separate branch is more complicated 
   than working directly in master, especially when you need to stay up-to-date with changes
   others are making. Rather than simply pulling and pushing, you need to pull changes into
   your local master branch, merge the local master into your branch (different-oil, in our
   case), then push your branch to the remote before finally merging your branch into master,
   either locally or on GitHub."

Commands (Reference: )

  