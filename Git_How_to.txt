GIT STATUS
GIT LOG 
GIT DIFF <commit> <commit> 

Get a repository from GitHub to local using,
"GIT CLONE <Url to repository>"
When cloning a repository a remote is set up automatically.

Reset all files to previous version "GIT CHECKOUT <commit>"
'HEAD' = current commit.
'detached HEAD' = current commit is not at the tip of the branch.
To discard any changes whilst checkout in
 'detached HEAD' use "GIT CHECKOUT master"
or to save any changes into a new branch use
"GIT CHECKOUT -B new_branch"
this is the same as running 'GIT BRANCH new_branch'
and 'GIT CHECKOUT new_branch'

Create Repository "GIT INIT"
Add files to staged area "GIT ADD <file_name.txt> <file_name2.md>"
Commit files to repository "GIT COMMIT"
add commit message, see:
"C:\...\Projects\Udacity\Git\Commit Message Style Guide"
It's a good idea to keep a idea history of commits,
to make this easy to read later use a flow-chart,
update flow chart with new commit.

Make a new branch for every feature or bug fix.
View branches "GIT BRANCH"
Create new branch "GIT BRANCH <new_branch_name>"
GIT CHECKOUT new_branch_name

Combine changes, merge new_branch into master branch.
Merge into Master "GIT MERGE <master> <new_branch_name>" 
Merge commit message, i.e. 'merged two branches'
Delete old branch "GIT BRANCH -D <old_branch_name>"
Update flow chart / history diagram 
to show updated branch and commit.

Resolving concflicts:
<<<<<<<< = my code
|||||||| = original version 
>>>>>>>> = code thats in master

Find the differences between >>>> and ||||
then the differences between <<<< and ||||

Resolve the merge confict and remove junk
GIT ADD <file_name>
GIT COMMIT


GitHub: 
A remote is a stored location of a repository.
With remotes we can PUSH and PULL.
Only new commits will be pushed.

See all current remotes "GIT REMOTE -v"
Naming the first remote as 'origin' is convention.
Create a remote: "GIT REMOTE ADD <origin> <url to repository>"

Send a branch to a remote repository: 
"GIT PUSH <remote_name> <branch_name>" 

Bring changes on GitHub to local repository:
"GIT PULL <remote> <branch_name>"

Get a repository on GitHub to my GitHub profile:
Fork an existing repository. A fork is a clone on GitHub.
Pull from GitHub to Local: GIT CLONE <url>
"GIT REMOTE -V" shows the remote which is auto-created.
Add any Collaborators, on GitHub go to Settings->Collaborators
then add username.

The master branch on GitHub is saved locally with the remote.
This would be under branch 'origin/master'.
If we make a change on the local branch 'master' we'll be one
commit ahead of the branch 'origin/master' until we PUSH or PULL 
from the remote. 
To PULL the remote branch without making changes to the local master
use "GIT FETCH <origin>". 
This allows an updated comparison with origin/master, without the 
need to combine any changes. 
(Merging into the master should only be done using pull requests.)
To combine the remote branch 'origin/master' with the local branch
'master' use "GIT MERGE <master> <origin/master>"

"GIT PULL <remote_name> <branch_name>"
 is the same as doing
"GIT FETCH <remote_name>" and 
"GIT MERGE <local_branch_name> <remote_name/branch_name>"

Update local copies of remote branch "GIT FETCH <remote>"

Inspect local copies using "GIT LOG <remote/branch_name>" 
or "GIT DIFF <remote/branch_name> <local_branch_name>" 

Use "GIT STATUS" to show any commit differences and make sure
everything is as egitxpected. 

Send changes to a remote:
"GIT PUSH <remote_name> <branch_name>" 


Collaborating using GitHub: Work flow.
Get feedback on changes before updating mater branch.
First: make a change locally in a seperate branch:
"git branch <changes_branch>"
"git checkout <changes_branch>"
*make changes* "git commit -a"
Second: push the change to my fork.
"git push <remote_name> <changes_branch>"
Create a pull request on GitHub to pull the changes into the master branch.
On GitHub, checkout the 'changes_branch' click 'pull request' 
check the repository we are merging into is correct, 
'Create Pull Request' (Which is a merge request, a request
to pull 'changes_branch' into 'master').
Only make changes to 'master' using pull requests.

Fixing conflicts:
Make changes to changes_branch then merge in master and push 
changes_branch to GitHub to update the pull request.
git pull <remote_name> <master_branch>
git checkout <changes_branch>
git merge <master> <changes_branch>
Resolve conflicts and commit the merge.
'changes_branch' should now contain all changes with no conflict.
git push <remote_name> <changes_branch>
On GitHub the pull request can be automatically merged. 
Leave a comment on the submitted pull request so an email is sent.

Keeping a fork up-to-date:
git remote add <remote_name_upstream> <url to repository>
git checkout <local_master>
git pull <remote_name_upstream> <branch_name_master>

git checkout <local_changes_branch>
git merge <local_master> <local_changes_branch>
*resolve conflict*
git add ChangesFile.txt
git commit
git push <fork_remote> <local_changes_branch> // to push branch to my fork

git checkout <local_master>
git push <fork_remote> <local_master>

--------------
Other useful commands: 

git log --oneline --graph

git mv 

pwd

-------------
File type:
.gitignore (git ignore files)
	for example: Android: .apk .gradle ect.
	
	