Question 1. What happens when you initialize a repository? Why do you need to do it?
	I need to initialise a repository so that the meta data contained in the file
	.git is created, this lets me view log and status of a repository.

Question 2. How is the staging area different from the working directory and the repository? What value do you think it offers?
	The stagging area holds files ready for a comit. This adds the value of being able to build a comit from specific files.

Question 3. How can you use the staging area to make sure you have one commit per logical change?
	Using the staging area I can check the changes I've made against the previous commit
	this helps to make sure that one logical step has been taken between commits.

Question 4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branching off from a project would allow for changes to be made experimentally without worrying about changing the original work
	allowing a new version or building on boiler plate to create specialised work.

Question 5. How do the diagrams help you visualize the branch structure?
	Diagrams of branch history help to make perfectly clear where each branch left the master and what additions or subtractions
	have moved with which branch. 

Question 6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merging two branches together combines them both to into master. In a diagram they are represented as two paralal time lines
	showing the commit history of both, this can help to see the changes made in each branch. the command 'git show <commit id>' will
	show the difference between a commit and its parent. 

Question 7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Auto-merging includes all the code from two merges, which should be fine if both commits are functional. 
	A con is that if the code conflicts in a way that is not directly related to a change both commits have
	done on the same piece of code, then it could take time to fine the conflict.
	A pro is that when two pieces of code have been changed git will highlight these using the follow identifiers:
	<<<< signals code from the current branch/commit
	>>>> signals code from the original code from which two pieces of code shared a commin ancestor
	==== signals code from the branch or commit which is being merged into the current. 

Commands (Reference: https://github.com/Denyos/reflections/blob/master/lesson_2_reflections.txt)

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.

